import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Stack;

import org.gt4j.annas.graph.EdgeInterface;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.SimpleUndirectedGraph;
import org.gt4j.annas.graph.util.traverse.LexBFS;

public class CliqueSeparator2<V, E extends EdgeInterface<V>> {

	private DecompositionNode root;

	private GraphInterface<V, E> graph;

	public CliqueSeparator2(GraphInterface<V, E> graph) {
		super();
		this.graph = graph;
	}

	public void construct() {
		List<V> ordering = this.getMinimalEliminationOrdering(graph);

		for (int i = 0; i < ordering.size(); i++) {
			V v = ordering.get(i);

			decompose(root, v, i);
		}
	}

	private DecompositionNode decompose(DecompositionNode dn, V v, int i) {
		Collection<V> C = this.getC(v, ordering, i);

		Collection<V> A = this.getConnectedComponent(v, C);
		Collection<V> B = new ArrayList<>(this.graph.getVertices());
		B.removeAll(C);
		B.removeAll(A);

		if (isClique(C) && !B.isEmpty()) {
			Atom a = new Atom(A);
			a.addvertices(C);
			
			CliqueSeparatorNode csn = new CliqueSeparatorNode(C, B);
			csn.setLeftChild(a);
			DecompositionNode dn_new = new DecompositionNode(B);
			dn_new.addvertices(C);

			csn.setRightChild(dn_new);

			graph.removeAll(A);

			List<V> ordering = this.getMinimalEliminationOrdering(graph);

			for (int i =1; i<ordering.size(); i++){

				decompose(dn_new, v, i)
			}

		}

		return null;
	}

	private boolean isClique(Collection<V> vertices) {

		for (V v : vertices) {
			for (V u : vertices) {
				if (!v.equals(u) && !this.graph.containsEdge(v, u)) {
					return false;
				}
			}
		}
		return true;
	}

	private Collection<V> getConnectedComponent(V v, Collection<V> avoiding) {
		Collection<V> visited = new ArrayList<>();
		Stack<V> stack = new Stack<>();
		stack.push(v);

		while (!stack.isEmpty()) {
			V u = stack.pop();
			if (!visited.contains(u)) {
				visited.add(u);
				for (EdgeInterface<V> e : this.graph.getEdges(u)) {
					V w = e.getOtherEndpoint(u);
					if (!stack.contains(w) && !avoiding.contains(w)) {
						stack.push(w);
					}
				}
			}
		}

		return visited;
	}

	private Collection<V> getC(V v, List<V> order, int i) {
		
		Collection<V> C = new Collection<V>();

		 for (int j=i+1; j<order.size(); j++){
		 	C.addvertices(order.size(j));

			if(isCutset){
				break;
			}		 
		 }

		return C;
	}

	private boolean isCutset(List<V> order, Collection<V> C) {

		boolean iscutset = false;

		order.removeAll(C);

		for (int i=1; i<order.size(); i++){
			for(int j=1; j<order.size(); j++){
				if(order.get(i)!=order.get(j) && !isPath(order.get(i),order.get(j),order)){
					iscutset=true;
				}
			}
		}
		return iscutset;
	}

	private List<V> getMinimalEliminationOrdering(GraphInterface<V, E> graph) {
		
		LexBFS<V> lex = new LexBFS<V>(graph);
		
		List<V> out = lex.getOrder();

		List<V> order = new List<V>();

		for (int i=out.size()-1; i>1; i--)
		{
			V v = out.get(i);

			List<V> neighbours = this.neighboursOf(graph, out, v);

			for (int j=1; j<out.size(); j++)
			{
				V w = out.get(j);

				if (!neighbours.contains(w) && v!=w){
					
					if(this.isPath(v,w, out)){
						if(step<j){
							order.add(w);
						}
					}
				}
			}
		}

		return order;
	}

	
	public int getStep(List<V> visited, int step, V v, V w, List<V> out) {
		List<V> neighbours=allNeighbours(this.graph,out,w);
		
		if(isPath(visited,v,w,out)){
			neighbours.removeAll(visited);
			for(V n : neighbours){
				if(isPath(visited,v,n,out)){
					step++;
					visited.add(w);
					getStep(visited,step,v,n,out);
				}
			}
		}
		return step;
	}
	
	public boolean isPath(List<V> visited, V v, V w, List<V> out) {

		boolean ispath = false;
		
		List<V> neighbours = new ArrayList<V>();
		
		neighbours.addAll(allNeighbours(this.graph, out, v));
		
		for(V vertex : neighbours){
			if(graph.getEdges(vertex, w).size() != 0){
				ispath = true;
				return true;
			}
		}
		
		neighbours.add(v);
		for(V o : neighbours){
			if(neighbours.containsAll(allNeighbours(this.graph, out, o)) && !visited.contains(o)){
				visited.add(o);
			}
		}
		neighbours.remove(v);
		
		if(!visited.contains(v)){
			visited.add(v);
		}
				
		neighbours.removeAll(visited);
		
		if(neighbours.size()==0){
			ispath=false;
			return false;
		}		
		
		while(!ispath){
			if(!v.equals(w))
			{
				if (this.graph.containsEdge(w, v))
				{
					ispath = true;
					return true;
				}
				else{
					if(out.indexOf(v)<out.indexOf(w)){
						for(int i=0; i<neighbours.size(); i++){
							
							V u = neighbours.get(i);

							if(this.isPath(visited,u,w,out)){
								return true;
							}
							else{
								return false;
							}
							
						}
					}
					else{
						for(int i=neighbours.size()-1; i>=0; i--){
							
							V u = neighbours.get(i);

							if(this.isPath(visited,u,w,out)){
								return true;
							}
							else{
								return false;
							}
							
						}
					}
				}
			}
		}
		return ispath;
	}
	
	public List<V> allNeighbours(GraphInterface<V, E> graph, List<V> out, V v){
		List<V> neighbours = new ArrayList<V>();
		
		for (int j =out.size()-1; j >=0; j--) {
			V ret = out.get(j);
			if (!v.equals(ret) && graph.getEdges(v, ret).size() != 0 && !neighbours.contains(ret)) {
				neighbours.add(ret);
			}
		}
		return neighbours;
	}

	public List<V> neighboursOf(GraphInterface<V, E> graph, List<V> out, V v) {
		ArrayList<V> l = new ArrayList<V>();
		int i = out.indexOf(v);

		for (int j = i - 1; j >= 0; j--) {
			V ret = out.get(j);
			if (graph.getEdges(v, ret).size() != 0) {
				l.add(ret);
			}
		}
		return l;
	}

	private class DecompositionNode {

		private DecompositionNode leftChild;

		private DecompositionNode rightChild;

		private Collection<V> vertices;

		public DecompositionNode(Collection<V> vertices) {
			super();
			this.vertices = vertices;
		}

		public DecompositionNode getLeftChild() {
			return leftChild;
		}

		public void setLeftChild(DecompositionNode leftChild) {
			this.leftChild = leftChild;
		}

		public DecompositionNode getRightChild() {
			return rightChild;
		}

		public void setRightChild(DecompositionNode rightChild) {
			this.rightChild = rightChild;
		}

		public Collection<V> getVertices() {
			return vertices;
		}

		public void setVertices(Collection<V> vertices) {
			this.vertices = vertices;
		}

		public void addvertices(Collection<V> verts) {
			this.vertices.addAll(verts);
		}

	}

	private class CliqueSeparatorNode extends DecompositionNode {

		private Collection<V> separator;

		public CliqueSeparatorNode(Collection<V> separator, Collection<V> vertices) {
			super(vertices);
			this.separator = separator;
		}

		public Collection<V> getSeparator() {
			return separator;
		}

		public void setSeparator(Collection<V> separator) {
			this.separator = separator;
		}

	}

	private class Atom extends DecompositionNode {

		public Atom(Collection<V> vertices) {
			super(vertices);

		}

	}
}