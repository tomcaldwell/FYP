import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Stack;

import org.gt4j.annas.graph.DefaultEdge;
import org.gt4j.annas.graph.EdgeInterface;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.SimpleUndirectedGraph;
import org.gt4j.annas.graph.util.Utilities;
import org.gt4j.annas.graph.util.traverse.LexBFS;

public class CliqueSeparator2<V, E extends EdgeInterface<V>> {

	private DecompositionNode root;

	private GraphInterface<V, E> graph;
	
	private GraphInterface<V, E> comp;
	
	private List<V> ordering;

	public CliqueSeparator2(GraphInterface<V, E> graph) {
		super();
		this.graph = graph;
	}

	public List<String> construct() {
		List<V> ordering = this.getMinimalEliminationOrdering(graph);
		System.out.println(ordering);

		for (int i = 0; i < ordering.size(); i++) {
			V v = ordering.get(i);

			decompose(root, v, i);
		}
		return null;
	}

	private DecompositionNode decompose(DecompositionNode dn, V v, int i) {
		
		List<V> order = getMinimalEliminationOrdering(graph);
		List<V> ord;
		
		if (ordering==null){
			ord = order;
		}
		else {
			ord=ordering;
		}
		
		Collection<V> C = this.getC(v, ord, i);
		Collection<V> A = this.getConnectedComponent(v, C);
		Collection<V> B = new ArrayList<>(this.graph.getVertices());
		B.removeAll(C);
		B.removeAll(A);
		
		/*System.out.println("Cutset: " + C);
		System.out.println("Atom: " + A);
		System.out.println("Remaining Graph: " + B);*/

		if (isClique(C) && !B.isEmpty()) {
			Atom a = new Atom(A);
			a.addvertices(C);
			
			CliqueSeparatorNode csn = new CliqueSeparatorNode(C, B);
			csn.setLeftChild(a);
			DecompositionNode dn_new = new DecompositionNode(B);
			dn_new.addvertices(C);

			csn.setRightChild(dn_new);

			graph.removeVertices(A);

			List<V> ordering = this.getMinimalEliminationOrdering(graph);

			for (int i1 =1; i1<ordering.size(); i1++){

				decompose(dn_new, v, i1);
			}

		}

		return null;
	}

	private Collection<V> getConnectedComponent(V v, Collection<V> avoiding) {
		Collection<V> visited = new ArrayList<>();
		Stack<V> stack = new Stack<>();
		stack.push(v);

		while (!stack.isEmpty()) {
			V u = stack.pop();
			if (!visited.contains(u)) {
				visited.add(u);
				for (EdgeInterface<V> e : this.graph.getEdges(u)) {
					V w = e.getOtherEndpoint(u);
					if (!stack.contains(w) && !avoiding.contains(w)) {
						stack.push(w);
					}
				}
			}
		}

		return visited;
	}

	private Collection<V> getC(V v, List<V> order, int i) {
		
		Collection<V> C = new ArrayList<V>();

		 for (int j=i+1; j<order.size(); j++){
			 for (int m=j; m<order.size(); m++){
				 C.add(order.get(m));
				 //System.out.println("C: " + C);
				 if(isCutset(order, C) && isClique(C)){
					 System.out.println("C is: " + C);
						break;
					}
			 }
		 }
		 
		return C;
	}

	public boolean isCutset(List<V> order, Collection<V> C) {
		List<V> in = new ArrayList<V>();
		for(V i: order){
			in.add(0,i);
		}

		order.removeAll(C);
		in.removeAll(C);

		for (int i=0; i<order.size(); i++){
			V u = order.get(i);
			for(int j=1; j<order.size(); j++){
				V v = order.get(j);
				if(!u.equals(v) && !isPath(u,v,order)/* && !isPath(v,u,order) 
						&& !isPath(u,v,in) && !isPath(v,u,in)*/){
					return true;
				}				
			}
		}
		return false;
	}
	
	public boolean isClique(Collection<V> vertices) {
		this.comp = Utilities.getComplement(this.graph);
		
		if(vertices.size()==1){
			return true;
		}
		for (V vertex : vertices) {
			for (V i : vertices) {
				
				if (vertex != i && !this.comp.getEdges(vertex, i).isEmpty()){
					return false;
				}
			
			}
		}
		return true;
	}

	public List<V> getMinimalEliminationOrdering(GraphInterface<V, E> graph) {
		
		LexBFS<V> lex = new LexBFS<V>(graph);
		
		List<V> out = lex.getOrder();
		//System.out.println("out: " + out);
		
		/*List<V> in = new ArrayList<V>();
		
		for(V i : out){
			in.add(0, i);
		}*/
		//System.out.println("in: " + in);

		List<V> order = new ArrayList<V>();

		for (int i=out.size()-1; i>0; i--)
		{
			V v = out.get(i);

			List<V> neighbours = this.neighboursOf(graph, out, v);

			for (int j=0; j<out.size(); j++)
			{
				V w = out.get(j);

				if (!v.equals(w) && !neighbours.contains(w) && !order.contains(w)){
					//if(i>=j){
						if(this.isPath(v,w, out)){
							if(getStep(v,w,out)<=j){
								order.add(w);
							}
						}
					//}
					/*else{
						if(this.isPath(v,w, out)){
							if(getStep(v,w,out)<=j){
								order.add(w);
							}
						}
					}*/
				}
			}
		}
		for (V v : out){
			if (out.contains(v) && !order.contains(v)){
				order.add(v);
			}
		}
		//System.out.println("order: " + order);
		return order;
	}

	public int getStep(V v, V w, List<V> out) {

		int step = 0;

		boolean ispath = false;

		List<V> neighbours = this.neighboursOf(graph, out, v);
		List<V> n = new ArrayList<V>();
		n.addAll(neighbours);
		
		if(n.size()==0 && !v.equals(w) && !this.graph.containsEdge(w,v)){
			return step;
		}

		while(!ispath){
			if(!v.equals(w))
			{
				if (this.graph.containsEdge(w, v))
				{
					step++;
					ispath=true;
					return step;
					
				}
				else{
					
					for(int i=n.size()-1; i>=0; i--)
					{
						if(!v.equals(w) && this.graph.containsEdge(v,w)){
							step++;
							return step;
						}
						V u = n.get(i);
						if(ispath==true){
							step++;
							neighbours.removeAll(neighbours);
							break;
						} else {
							 if(this.isPath(u,w,out)){
								 v=u;
								 step++;
								 List<V> neighs = this.neighboursOf(graph, out, v);
								 n=neighs;
								 break;
							 } 
						}

						
					}
				}
			}
		}
		return step;
	}
	
	public boolean isPath(V v, V w, List<V> out) {

		boolean ispath = false;
		
		out.remove(w);
		out.add(w);
		
		/*if(out.indexOf(v)>out.indexOf(w)){
			V temp = v;
			v = w;
			w = temp;
		}*/

		List<V> neighbours = this.neighboursOf(graph, out, v);
		
		if(neighbours.size()==0){
			for (EdgeInterface<V> e : this.graph.getEdges(v)) {
				V o = e.getOtherEndpoint(v);
				neighbours.add(o);
		}
		
		
		
		if(neighbours.size()==0 && !v.equals(w) && !this.graph.containsEdge(w,v)){
			return false;
		}

		while(!ispath){
			if(!v.equals(w))
			{
				if (this.graph.containsEdge(w, v))
				{
					ispath=true;
					return true;
				}
				else{
					for(int i=0; i<neighbours.size(); i++)
					{
						V u = neighbours.get(i);
						if(ispath==true){
							neighbours.removeAll(neighbours);
							break;
						} else {
							 if(this.isPath(u,w,out)){
								 return true;
							 } 
						}
					}
				}
			}
		}
		return ispath;
	}
	
	public List<V> neighboursOf(GraphInterface<V, E> graph, List<V> out, V v) {
		ArrayList<V> l = new ArrayList<V>();
		int i = out.indexOf(v);

		for (int j = i - 1; j >= 0; j--) {
			V ret = out.get(j);
			if (graph.getEdges(v, ret).size() != 0) {
				l.add(ret);
			}
		}
		return l;
	}

	private class DecompositionNode {

		private DecompositionNode leftChild;

		private DecompositionNode rightChild;

		private Collection<V> vertices;

		public DecompositionNode(Collection<V> vertices) {
			super();
			this.vertices = vertices;
		}

		public DecompositionNode getLeftChild() {
			return leftChild;
		}

		public void setLeftChild(DecompositionNode leftChild) {
			this.leftChild = leftChild;
		}

		public DecompositionNode getRightChild() {
			return rightChild;
		}

		public void setRightChild(DecompositionNode rightChild) {
			this.rightChild = rightChild;
		}

		public Collection<V> getVertices() {
			return vertices;
		}

		public void setVertices(Collection<V> vertices) {
			this.vertices = vertices;
		}

		public void addvertices(Collection<V> verts) {
			this.vertices.addAll(verts);
		}

	}

	private class CliqueSeparatorNode extends DecompositionNode {

		private Collection<V> separator;

		public CliqueSeparatorNode(Collection<V> separator, Collection<V> vertices) {
			super(vertices);
			this.separator = separator;
		}

		public Collection<V> getSeparator() {
			return separator;
		}

		public void setSeparator(Collection<V> separator) {
			this.separator = separator;
		}

	}

	private class Atom extends DecompositionNode {

		public Atom(Collection<V> vertices) {
			super(vertices);

		}

	}
}