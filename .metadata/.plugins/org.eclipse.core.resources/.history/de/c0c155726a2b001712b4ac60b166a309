import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.gt4j.annas.graph.DefaultEdge;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.UndirectedGraph;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class Recognition {
	
	private GraphInterface<String, DefaultEdge> graph;
	private Condition1<String, DefaultEdge> cond1;
	private Condition2<String, DefaultEdge> cond2;
	private CliqueSeparator2<String, DefaultEdge> decomposition;
	private CliqueSeparator2<String, DefaultEdge>.DecompositionNode root;
	
	
	String a = "A";
	String b = "B";
	String c = "C";
	String d = "D";
	String e = "E";
	String f = "F";
	String g = "G";
	String h = "H";
	String i = "I";
	String j = "J";
	String k = "K";
	String l = "L";
	String m = "M";
	String n = "N";
	String o = "O";
	
	String p = "P";
	String q = "Q";
	String r = "R";
	
	
	
	
	@Before
	public void setUp() throws Exception {

		graph = new UndirectedGraph<String, DefaultEdge>(
				DefaultEdge.class);

		graph.addVertex(a);
		graph.addVertex(b);
		graph.addVertex(c);
		graph.addVertex(d);
		graph.addVertex(e);
		graph.addVertex(f);
		graph.addVertex(g);
		graph.addVertex(h);
		graph.addVertex(i);
		graph.addVertex(j);
		graph.addVertex(k);
		graph.addVertex(l);
		graph.addVertex(m);
		graph.addVertex(n);
		graph.addVertex(o);		

		DefaultEdge e1 = graph.addEdge(a, b);
		e1 = graph.addEdge(a, c);
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(c, e);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(d, f);
		e1 = graph.addEdge(e, h);
		e1 = graph.addEdge(f, g);
		e1 = graph.addEdge(h, g);
		e1 = graph.addEdge(h, i);
		e1 = graph.addEdge(g, i);
		e1 = graph.addEdge(h, j);
		e1 = graph.addEdge(j, i);
		e1 = graph.addEdge(j, k);
		e1 = graph.addEdge(j, l);
		e1 = graph.addEdge(j, m);
		e1 = graph.addEdge(j, n);
		e1 = graph.addEdge(o, n);
		e1 = graph.addEdge(o, m);
		e1 = graph.addEdge(n, l);
		e1 = graph.addEdge(n, m);
		e1 = graph.addEdge(n, k);
		e1 = graph.addEdge(k, m);
		e1 = graph.addEdge(k, l);
		e1 = graph.addEdge(l, m);
		
		
		/*graph.addVertex(a);
		graph.addVertex(b);
		graph.addVertex(c);
		graph.addVertex(d);
		graph.addVertex(e);
		graph.addVertex(f);		

		DefaultEdge e1 = graph.addEdge(a, b);
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(a, e);
		e1 = graph.addEdge(f, a);
		e1 = graph.addEdge(f, b);
		e1 = graph.addEdge(f, c);
		e1 = graph.addEdge(f, d);
		e1 = graph.addEdge(f, e);*/
		
		
		
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(this.graph);
		//assertTrue(this.graph.getVertices().size()==15);
	
	}
	
	@After
	public void tearDown() throws Exception {
	}
	
	/*@Test
	public void TestConn(){
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(this.graph);
		List<String> order = new ArrayList<>();
		order.add(j);
		//order.add(e);
		order.add(m);
		//order.add(l);
		System.out.println(this.decomposition.getConnectedComponent(n, order));
		assertTrue(this.decomposition.getConnectedComponent(n, order).size()==4);
	}*/
	
	@Test
	public void recogniseGraph() {
		GraphInterface<String, DefaultEdge> thisGraph = graph;
		GraphInterface<String, DefaultEdge> originalGraph = thisGraph;
		List<String> vertices = new ArrayList<>(thisGraph.getVertices());
		
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(graph);
		this.cond1 = new Condition1<String, DefaultEdge>(graph);
		this.cond2 = new Condition2<String, DefaultEdge>(graph);
		
		ArrayList<ArrayList<String>> Atoms = new ArrayList<ArrayList<String>>();
		
		ArrayList<ArrayList<String>> Leaves = this.decomposition.construct(root, Atoms);
		
		boolean inclass=true;
		
		for(ArrayList<String> Leaf : Leaves){
			if(!inClass(Leaf)){
				inclass=false;
			}System.out.println("Leaf: " + Leaf + ", in Class? " + inclass);
		}
		
		if(inclass){
			System.out.println("GRAPH IS IN CLASS C");
		}else{
			System.out.println("GRAPH IS NOT IN CLASS");
		}
		
	}
	
	public boolean inClass(List<String> Leaf){
		
		if(!this.cond1.Satisfies1(getGraph(Leaf)) && !this.cond2.Satisfies2(getGraph(Leaf))){
			return false;
		}
		else{
			return true;
		}
	}
	
	public GraphInterface<String, DefaultEdge> getGraph(List<String> vertices){
		List<String> rems = new ArrayList<>(graph.getVertices());
		rems.removeAll(vertices);
		GraphInterface<String, DefaultEdge> newGraph = graph;
		newGraph.removeVertices(rems);
		return newGraph;
	}
	
}
