import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;

import org.gt4j.annas.graph.EdgeInterface;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.util.Utilities;

public class Condition1 <V, E extends EdgeInterface<V>> extends Utilities {

	private GraphInterface<V, E> graph;
	
	public Condition1(GraphInterface<V, E> graph) {
		super();
		this.graph = graph;
	}
	
	
	public boolean Satisfies1(GraphInterface<V, E> graph){
		List<V> Hole = call(graph);
		List<V> Clique = new ArrayList<>();
		Set<V> Vertices = graph.getVertices();
		
		Vertices.removeAll(Hole);
		Clique.addAll(Vertices);
		
		if(isLongHole(Hole) && isClique(graph,Clique)){
			return true;
		}
		else{
			return false;
		}
		
	}	

	public List<V> call(GraphInterface<V, E> graph) {
		GraphInterface<V, E> comp = Utilities.getComplement(graph);
		List<V> VertexSet = new ArrayList<>();
		VertexSet.addAll(graph.getVertices());
				
		List<V> Hole = new ArrayList<>();
		List<V> Clique = new ArrayList<>();
		
		for(V vertex : VertexSet){
			if(allNeighbours(comp,vertex).isEmpty()){
				Clique.add(vertex);
			}
			else{
				Hole.add(vertex);
			}
		}		
		return Hole;
	}
	
		
	public boolean isLongHole(List<V> hole) {
		
		if(hole.size()<5){
			return false;
		}
		
		for(V v : hole){
			if(allNeighbours(this.graph, v).size()!=2){
				return false;
			}
		}
		
		List<V> Hole = new ArrayList<>(hole);
		List<V> visited = new ArrayList<>();
		V v = Hole.get(0);
		V endpoint = allNeighbours(this.graph, v).get(0);
		visited.add(endpoint);
		
		List<V> vis = checkVisited(visited,v,this.graph);
		if(vis.containsAll(hole) && hole.containsAll(vis)){
			return true;
		}
		else{
			return false;
		}		
	}
	
	public List<V> checkVisited(List<V> visited, V vertex, GraphInterface<V,E> graph){
		visited.add(vertex);
		List<V> neighbours = allNeighbours(graph, vertex);
		for(V n : neighbours){
			if(!visited.contains(n)){
				checkVisited(visited, n, graph);
			}
		}
		return visited;
	}
	
	public boolean isClique(GraphInterface<V, E> graph, List<V> C){
		GraphInterface<V, E> comp = Utilities.getComplement(graph);
		
		for(V v : C){
			if(comp.getEdges(v).size()!=0){
				return false;
			}
		}
		return true;
	}
	
	public List<V> allNeighbours(GraphInterface<V, E> graph, V v){
		List<V> neighbours = new ArrayList<V>();
		Set<V> in = graph.getVertices();
		List<V> out = new ArrayList<>(in);
		
		for (int j =out.size()-1; j >=0; j--) {
			V ret = out.get(j);
			if (!v.equals(ret) && graph.getEdges(v, ret).size() != 0 && !neighbours.contains(ret)) {
				neighbours.add(ret);
			}
		}
		return neighbours;
	}

}
