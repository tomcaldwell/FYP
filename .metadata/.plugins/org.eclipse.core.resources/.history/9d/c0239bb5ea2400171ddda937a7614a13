import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.gt4j.annas.graph.DefaultEdge;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.UndirectedGraph;
import org.gt4j.annas.graph.util.traverse.LexBFS;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

//import CliqueSeparator2.DecompositionNode;


//import CliqueSeparator2<String, DefaultEdge extends EdgeInterface<V>>;



public class TestDecomp {
	
	private GraphInterface<String, DefaultEdge> graph;
	
	private CliqueSeparator2<String, DefaultEdge> decomposition;
	
	private CliqueSeparator2<String, DefaultEdge>.DecompositionNode node;

	
	String a = "A";
	String b = "B";
	String c = "C";
	String d = "D";
	String e = "E";
	String f = "F";
	String g = "G";
	String h = "H";
	String i = "I";
	String j = "J";
	String k = "K";
	String l = "L";
	String m = "M";
	String n = "N";
	String o = "O";
	
	
	
	
	@Before
	public void setUp() throws Exception {

		graph = new UndirectedGraph<String, DefaultEdge>(
				DefaultEdge.class);

		graph.addVertex(a);
		graph.addVertex(b);
		graph.addVertex(c);
		graph.addVertex(d);
		graph.addVertex(e);
		graph.addVertex(f);
		graph.addVertex(g);
		graph.addVertex(h);
		graph.addVertex(i);
		graph.addVertex(j);
		graph.addVertex(k);
		graph.addVertex(l);
		graph.addVertex(m);
		graph.addVertex(n);
		graph.addVertex(o);
		

		DefaultEdge e1 = graph.addEdge(a, b);
		
		/**e1 = graph.addEdge(a, c);
		e1 = graph.addEdge(a, d);
		e1 = graph.addEdge(a, e);
		e1 = graph.addEdge(a, f);
		e1 = graph.addEdge(a, g);
		e1 = graph.addEdge(a, h);
		e1 = graph.addEdge(a, i);
		e1 = graph.addEdge(a, j);
		
		
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(e, f);
		e1 = graph.addEdge(f, g);
		e1 = graph.addEdge(g, h);
		e1 = graph.addEdge(h, i);
		e1 = graph.addEdge(i, j);
		e1 = graph.addEdge(j, k);
		e1 = graph.addEdge(k, l);
		e1 = graph.addEdge(l, m);
		e1 = graph.addEdge(m, n);
		e1 = graph.addEdge(n, o);
		e1 = graph.addEdge(n, m);
		e1 = graph.addEdge(g, o);*/
		
		
		
		e1 = graph.addEdge(a, c);
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(c, e);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(d, f);
		e1 = graph.addEdge(e, h);
		e1 = graph.addEdge(f, g);
		e1 = graph.addEdge(h, g);
		e1 = graph.addEdge(h, i);
		e1 = graph.addEdge(g, i);
		e1 = graph.addEdge(h, j);
		e1 = graph.addEdge(j, i);
		e1 = graph.addEdge(j, k);
		e1 = graph.addEdge(j, l);
		e1 = graph.addEdge(j, m);
		e1 = graph.addEdge(j, n);
		e1 = graph.addEdge(o, n);
		e1 = graph.addEdge(o, m);
		e1 = graph.addEdge(n, l);
		e1 = graph.addEdge(n, m);
		e1 = graph.addEdge(n, k);
		e1 = graph.addEdge(k, m);
		e1 = graph.addEdge(k, l);
		e1 = graph.addEdge(l, m);
		
		//e1 = graph.addEdge(c, d);
		
		
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(this.graph);
		//assertTrue(this.graph.getVertices().size()==15);
	
	}
	
	@After
	public void tearDown() throws Exception {
	}
	
	@Test
	public void TestD() {
		
		
		//this.cond1.classify(hole)
		
		this.decomposition.construct();
		//assertTrue(connected);
		//CliqueSeparatorNode leftChild = 
		//child = this.decomposition.decompose(node, n, 0).getLeftChild();
		//System.out.println(child);
		
	}
	
	
	@Test
	public void TestDecomposition(){
		//List<String> node = new CliqueSeparator2<String,DefaultEdge>.DecompositionNode.DecompositionNode
		//private CliqueSeparator2<String, DefaultEdge>.DecompositionNode ightChild;
		Collection<String> vertices = new ArrayList<>(this.graph.getVertices());
		this.node = DecompositionNode(vertices);
		this.decomposition.decompose(node, n, 0);
		
		
	}
	
	private CliqueSeparator2<String, DefaultEdge>.DecompositionNode DecompositionNode(Collection<String> vertices) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Test
	public void TestConnected(){
		List<String> vertices = new ArrayList<>();
		vertices.addAll(this.graph.getVertices());
		//assertTrue(this.decomposition.isConnected(vertices));
		//this.graph.removeEdge(h,j);
		//assertTrue(this.decomposition.isConnected(vertices));
		//this.graph.removeEdge(i,j);
		vertices.remove(j);
		assertFalse(this.decomposition.isConnected(vertices));
		this.graph.resetEdges();
		assertFalse(this.decomposition.isConnected(vertices));
	}
	
	/*@Test
	public void isAPath(){	
		
		List<String> order = new ArrayList<>();
		
		order.add(j);
		order.add(i);
		order.add(e);
		order.add(g);
		order.add(c);
		order.add(f);
		order.add(d);
		order.add(b);
		order.add(a);
		order.add(m);
		
				//[J, I, E, G, C, F, D, B, A, M]
		
		List<String> visited = new ArrayList<>();
		
		assertTrue(this.decomposition.isPath(visited, d, j, order));
		/*List<String> C = new ArrayList<>();
		List<String> A = new ArrayList<>();
		A.add(o);
		A.add(n);
		A.add(k);
		A.add(l);
		C.add(h);
		
		graph.removeVertices(A);
		List<String> order = this.decomposition.getMinimalEliminationOrdering(this.graph);
		
		assertFalse(this.decomposition.isCutset(order, C));/
		
		
	}

	@Test
	public void TestgetCC(){
		List<String> C = new ArrayList<>();
		List<String> A = new ArrayList<>();
		C.add(m);
		C.add(j);
		A.add(o);
		A.add(n);
		A.add(l);
		A.add(k);
		assertTrue(this.decomposition.getConnectedComponent(n,C).containsAll(A));
		assertTrue(A.containsAll(this.decomposition.getConnectedComponent(n,C)));
	}
	
	@Test
	public void TestgetC(){
		List<String> order = this.decomposition.getMinimalEliminationOrdering(this.graph);
		System.out.println(order);
		List<String> C = new ArrayList<>();
		C.add(m);
		C.add(j);
		//assertTrue(this.decomposition.isClique(C));
		//assertTrue(this.decomposition.isCutset(order, C));
		assertTrue(this.decomposition.getC(n, order, 0).containsAll(C));
		assertTrue(C.containsAll(this.decomposition.getC(n, order, 0)));
		
	}
	
	
	@Test
	public void TestIsClique(){
		this.graph.resetEdges();
		
		for(String s : this.graph.getVertices()){
			for (String u : this.graph.getVertices()){
				if(s != u ){
						this.graph.addEdge(s, u);
				}
			}
		}
		
		assertTrue(this.decomposition.isClique(this.graph.getVertices()));
		
		this.graph.removeEdge(a,b);
		assertFalse(this.decomposition.isClique(this.graph.getVertices()));
		
		this.graph.resetEdges();
		assertFalse(this.decomposition.isClique(this.graph.getVertices()));
		
		this.graph.addEdge(a,b);
		assertFalse(this.decomposition.isClique(this.graph.getVertices()));
	}
	
	
	@Test
	public void TestisCutset(){
		List<String> orde = this.decomposition.getMinimalEliminationOrdering(this.graph);
		System.out.println(this.graph);
		Collection<String> A = Arrays.asList("H", "G");
		Collection<String> B = Arrays.asList("C", "D", "E", "F");
		Collection<String> C = Arrays.asList("J");
		Collection<String> D = Arrays.asList("H", "M");
		
		System.out.println(orde);
		System.out.println(D);
		
		assertTrue(this.decomposition.isCutset(orde, A));
		assertTrue(this.decomposition.isCutset(orde, B));
		assertTrue(this.decomposition.isCutset(orde, C));
		assertFalse(this.decomposition.isCutset(orde, D));
		
		
	}
		
	
	
	@Test
	public void TestCutset(){
		Collection<String> C = new ArrayList<>();
		
		C.clear();
		C.add(k);
		C.add(m);
		C.add(o);
		C.add(a);
		List<String> ordr = this.decomposition.getMinimalEliminationOrdering(this.graph);
		assertFalse(this.decomposition.isCutset(ordr,C));
		System.out.println("SUCCESS");
		
		C.clear();
		C.add(h);
		C.add(m);
		List<String> ord = this.decomposition.getMinimalEliminationOrdering(this.graph);
		assertFalse(this.decomposition.isCutset(ord,C));
		System.out.println("SUCCESS");
		
		C.clear();
		C.add(j);
		List<String> order = this.decomposition.getMinimalEliminationOrdering(this.graph);
		assertTrue(this.decomposition.isCutset(order,C));
		System.out.println("SUCCESS");
		
		C.clear();
		C.add(d);
		C.add(e);
		List<String> orde = this.decomposition.getMinimalEliminationOrdering(this.graph);
		assertTrue(this.decomposition.isCutset(orde,C));
		System.out.println("SUCCESS");
		
		C.clear();
		C.add(c);
		C.add(e);
		C.add(d);
		List<String> oder = this.decomposition.getMinimalEliminationOrdering(this.graph);
		assertTrue(this.decomposition.isCutset(oder,C));
		System.out.println("SUCCESS");
	}
	
	@Test
	public void TestMinElOrd(){
		assertTrue(this.decomposition.getMinimalEliminationOrdering(this.graph).size()==this.graph.getVertices().size());
	}
	
	@Test
	public void TestStep(){
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		List<String> out = lex.getOrder();
		List<String> visited = new ArrayList<>();
		List<String> in = new ArrayList<>();
		int step=0;
		
		
		//System.out.println(out);
		
		//assertTrue(this.decomposition.getStep(visited,0,d,o,out)==5);
		assertTrue(this.decomposition.getStep(visited,0,c,o,out)==5);
		visited.clear();
		//assertTrue(this.decomposition.getStep(visited,0,a,o,out)==6);
		//visited.clear();
		//assertTrue(this.decomposition.getStep(visited,0,b,o,out)==6);
		
		for(int j=out.size()-1; j>=0; j--){
			for(int i=0; i<out.size(); i++){
				if(i!=j){
					visited.clear();
					assertTrue(this.decomposition.getStep(visited,step,out.get(i), out.get(j), out)!=0);
					//System.out.println("start: " + out.get(i) + ", end: " + out.get(j) + ", step: " + this.decomposition.getStep(visited,step,out.get(i), out.get(j), out));
				}
			}
		}
	}
	
	@Test
	public void TestisPath(){
		List<String> C = new ArrayList<>();
		//C.add(h);
		C.add(m);
		
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		List<String> out = lex.getOrder();
		List<String> visited = new ArrayList<>();
		this.graph.removeVertices(C);
		
		//System.out.println(out);
		
		assertTrue(this.decomposition.isPath(visited,n,j,out));
		
		for(int j=out.size()-1; j>=0; j--){
			for(int i=0; i<out.size(); i++){
				if(i!=j){
					visited.clear();
					System.out.println(i);
					System.out.println(j);
					assertTrue(this.decomposition.isPath(visited,out.get(i),out.get(j),out));
				}
			}
		}
		
		this.graph.resetEdges();
		this.graph.addEdge(a, b);
		this.graph.addEdge(b, c);
		this.graph.addEdge(d, e);
		this.graph.addEdge(c,d);
		
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		List<String> out = lex.getOrder();
		List<String> visited = new ArrayList<>();
		int step=0;
		
		assertTrue(this.decomposition.isPath(step,visited,a,d,out));
		this.graph.removeEdge(c,d);
		assertFalse(this.decomposition.isPath(step,visited,a,d,out));
		
	}
	
	@Test
	public void TestneighboursOf(){
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		List<String> out = lex.getOrder();
		
		System.out.println(out);
		
		assertTrue(this.decomposition.neighboursOf(this.graph,out,o).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,d).size()==0);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,c).size()==1);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,e).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,f).size()==1);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,b).size()==1);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,a).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,h).size()==1);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,g).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,i).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,j).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,n).size()==1);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,m).size()==2);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,l).size()==3);
		assertTrue(this.decomposition.neighboursOf(this.graph,out,k).size()==4);
	}*/
	

}