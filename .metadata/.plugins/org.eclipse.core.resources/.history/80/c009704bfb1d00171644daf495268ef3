import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.gt4j.annas.graph.DefaultEdge;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.UndirectedGraph;
import org.gt4j.annas.graph.util.traverse.LexBFS;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class TestDecomp {
	
	private GraphInterface<String, DefaultEdge> graph;
	
	private CliqueSeparator2<String, DefaultEdge> decomposition;

	
	String a = "A";
	String b = "B";
	String c = "C";
	String d = "D";
	String e = "E";
	String f = "F";
	String g = "G";
	String h = "H";
	String i = "I";
	String j = "J";
	String k = "K";
	String l = "L";
	String m = "M";
	String n = "N";
	String o = "O";
	
	
	
	
	@Before
	public void setUp() throws Exception {

		graph = new UndirectedGraph<String, DefaultEdge>(
				DefaultEdge.class);

		graph.addVertex(a);
		graph.addVertex(b);
		graph.addVertex(c);
		graph.addVertex(d);
		graph.addVertex(e);
		graph.addVertex(f);
		graph.addVertex(g);
		graph.addVertex(h);
		graph.addVertex(i);
		graph.addVertex(j);
		graph.addVertex(k);
		graph.addVertex(l);
		graph.addVertex(m);
		graph.addVertex(n);
		graph.addVertex(o);
		

		DefaultEdge e1 = graph.addEdge(a, b);
		
		/**e1 = graph.addEdge(a, c);
		e1 = graph.addEdge(a, d);
		e1 = graph.addEdge(a, e);
		e1 = graph.addEdge(a, f);
		e1 = graph.addEdge(a, g);
		e1 = graph.addEdge(a, h);
		e1 = graph.addEdge(a, i);
		e1 = graph.addEdge(a, j);
		
		
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(e, f);
		e1 = graph.addEdge(f, g);
		e1 = graph.addEdge(g, h);
		e1 = graph.addEdge(h, i);
		e1 = graph.addEdge(i, j);
		e1 = graph.addEdge(j, k);
		e1 = graph.addEdge(k, l);
		e1 = graph.addEdge(l, m);
		e1 = graph.addEdge(m, n);
		e1 = graph.addEdge(n, o);
		e1 = graph.addEdge(n, m);
		e1 = graph.addEdge(g, o);*/
		
		
		
		e1 = graph.addEdge(a, c);
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(c, e);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(d, f);
		e1 = graph.addEdge(e, h);
		e1 = graph.addEdge(f, g);
		e1 = graph.addEdge(h, g);
		e1 = graph.addEdge(h, i);
		e1 = graph.addEdge(g, i);
		e1 = graph.addEdge(h, j);
		e1 = graph.addEdge(j, i);
		e1 = graph.addEdge(j, k);
		e1 = graph.addEdge(j, l);
		e1 = graph.addEdge(j, m);
		e1 = graph.addEdge(j, n);
		e1 = graph.addEdge(o, n);
		e1 = graph.addEdge(o, m);
		e1 = graph.addEdge(n, l);
		e1 = graph.addEdge(n, m);
		e1 = graph.addEdge(n, k);
		e1 = graph.addEdge(k, m);
		e1 = graph.addEdge(k, l);
		e1 = graph.addEdge(l, m);
		
		//e1 = graph.addEdge(c, d);
		
		
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(this.graph);
		
	}
	
	@After
	public void tearDown() throws Exception {
	}
	
	@Test
	public void TestD() {
		
		
		//this.cond1.classify(hole)
		
		//List<String> connected = this.decomposition.construct();
		
		//assertTrue(connected);
		
		
	}
	
	/*@Test
	public void TestIsClique(){
		this.graph.resetEdges();
		
		for(String s : this.graph.getVertices()){
			for (String u : this.graph.getVertices()){
				if(s != u ){
						this.graph.addEdge(s, u);
				}
			}
		}
		
		assertTrue(this.decomposition.isClique(this.graph.getVertices()));
		
		this.graph.removeEdge(a,b);
		assertFalse(this.decomposition.isClique(this.graph.getVertices()));
		
		this.graph.resetEdges();
		assertFalse(this.decomposition.isClique(this.graph.getVertices()));
		
		this.graph.addEdge(a,b);
		assertFalse(this.decomposition.isClique(this.graph.getVertices()));
	}
	
	
	@Test
	public void TestisCutset(){
		List<String> orde = this.decomposition.getMinimalEliminationOrdering(this.graph);
		System.out.println(this.graph);
		Collection<String> A = Arrays.asList("H", "G");
		Collection<String> B = Arrays.asList("C", "D", "E", "F");
		Collection<String> C = Arrays.asList("J");
		Collection<String> D = Arrays.asList("H", "M");
		
		System.out.println(orde);
		System.out.println(D);
		
		//assertTrue(this.decomposition.isCutset(orde, A));
		//assertTrue(this.decomposition.isCutset(orde, B));
		assertTrue(this.decomposition.isCutset(orde, C));
		assertFalse(this.decomposition.isCutset(orde, D));
		
		
	}*/
	
	
	/*@Test
	public void TestneighboursOf(){
		this.graph.resetEdges();
		
		this.graph.addEdge(a,b);
		this.graph.addEdge(b,c);
		this.graph.addEdge(c,d);
		
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		
		List<String> out = lex.getOrder();
		List<String> order = new ArrayList<String>();
		
		order.addAll(out);
		order.remove("D");
		order.add("D");
		//System.out.println(order);
		
		//System.out.println(this.decomposition.neighboursOf(this.graph, order, d));
		assertTrue(this.decomposition.neighboursOf(this.graph, order, d).size() == 1);
		
		order.remove("B");
		order.add("B");
		assertTrue(this.decomposition.neighboursOf(this.graph, order, d).size() == 1);
		assertFalse(this.decomposition.neighboursOf(this.graph, order, b).size() == 1);
		assertTrue(this.decomposition.neighboursOf(this.graph, order, b).size()==2);
	}
	
	@Test
	public void TestisPath(){
		
		
		this.graph.resetEdges();
		
		this.graph.addEdge(a,b);
		this.graph.addEdge(b,c);
		this.graph.addEdge(c,d);
		this.graph.addEdge(b,e);
		
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		
		List<String> out = lex.getOrder();
		List<String> order = new ArrayList<String>();
		
		order.addAll(out);
		order.remove("D");
		order.add("D");
		System.out.println(order);
		
		assertTrue(this.decomposition.isPath(a,d,order));
		assertTrue(this.decomposition.isPath(e,d,order));
		assertFalse(this.decomposition.isPath(f,d,order));
		assertTrue(this.decomposition.isPath(d,a,order));
		assertTrue(this.decomposition.isPath(d,e,order));
		assertFalse(this.decomposition.isPath(d,f,order));
		
		
		//System.out.println(this.decomposition.isPath(a,d,order));
		//System.out.println(this.decomposition.isPath(e,d,order));
		//System.out.println(this.decomposition.isPath(f,d,order));
				
	}*/
	
	/*@Test
	public void TestgetStep(){
		this.graph.resetEdges();
		
		this.graph.addEdge(a,b);
		this.graph.addEdge(b,c);
		this.graph.addEdge(c,d);
		this.graph.addEdge(a,e);
		this.graph.addEdge(b,e);
		this.graph.addEdge(f,e);
		this.graph.addEdge(f,a);
		this.graph.addEdge(e,c);
		
		LexBFS<String> lex = new LexBFS<String>(this.graph);
		
		List<String> out = lex.getOrder();
		List<String> order = new ArrayList<String>();
		
		order.addAll(out);
		order.remove("D");
		order.add("D");
		//System.out.println(order);
		//System.out.println(this.decomposition.getStep(a,d,order));
		
		assertTrue(this.decomposition.getStep(a,d,order)==3);
		assertTrue(this.decomposition.getStep(b,d,order)==2);
		assertTrue(this.decomposition.getStep(c,d,order)==1);
		assertTrue(this.decomposition.getStep(e,d,order)==2);
		//System.out.println(this.decomposition.getStep(e,d,order));
		assertTrue(this.decomposition.getStep(f,d,order)==3);
		assertTrue(this.decomposition.getStep(f,b,order)==2);
		assertTrue(this.decomposition.getStep(f,c,order)==2);
		//assertFalse(this.decomposition.getStep(e,d,order)==2);
	}*/
	
	@Test
	public void TestgetMinimalEliminationOrdering(){
		System.out.println("ordering: " + this.decomposition.getMinimalEliminationOrdering(this.graph));
		assertTrue(this.decomposition.getMinimalEliminationOrdering(this.graph).size()==15);
	}
	

}