import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;

import org.gt4j.annas.graph.DefaultEdge;
import org.gt4j.annas.graph.EdgeInterface;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.SimpleUndirectedGraph;

public class Condition1 <V, E extends EdgeInterface<V>> {

	private GraphInterface<V, E> graph;
	private HashSet<V> VertexSet;
	private HashSet<V> VertexSettmp;
	private HashSet<E> EdgeSet;
	private Hashtable<V, Integer> map;
	
	private HashSet<V> Hole = null;
	private HashSet<V> Clique = null;
	
	public Condition1(final GraphInterface<V, E> g) {
		this.graph = g;
		this.EdgeSet = new HashSet<E>();
		this.VertexSet = new HashSet<V>();
		this.VertexSettmp = new HashSet<V>();
		this.Hole = new HashSet<V>();
		this.Clique = new HashSet<V>();
	}
	
	public HashSet<V> call() {
		this.EdgeSet.addAll(this.graph.getEdges());
		this.VertexSet.addAll(this.graph.getVertices());
		this.VertexSettmp.addAll(this.graph.getVertices());
		
		for (V vertex : VertexSet) {
			for (V i : VertexSet) {
				if (vertex != i) {
					if (graph.getEdges(vertex, i).isEmpty()) {
						this.Hole.add(vertex);
						this.Hole.add(i);
						this.VertexSettmp.remove(vertex);
						this.VertexSettmp.remove(i);
					}
					else {
						this.Clique.add(i);
						this.VertexSettmp.remove(i);
					}
				}
			}
		}
		System.out.println(Clique);
		System.out.println(Hole);
		return Hole;
	}
	
	public boolean classify(GraphInterface<V, E> hole) {
		this.graph.addVertices(this.Hole);
		this.graph = hole;
		
		boolean containsCycle = containsCycle();
		boolean OrderSize = hole.getOrder() == hole.getSize();
		
		return containsCycle && OrderSize;
	}
		
	private boolean containsCycle() {	
		for (V node : this.Hole)
			this.map.put(node, -1);

		for (V node : this.graph.getVertices()) {
			if (this.map.get(node) == -1) {
				if (this.visit(node, node)) {
					return true;
				}
			}
		}
		return false;
		
		
	}
	
	private boolean visit(V node, V pred) {
		this.map.put(node, 0);

		for (E arc : this.graph.getEdges(node)) {
			V head = arc.getOtherEndpoint(node);
			if (!head.equals(pred)) {
				Integer h = this.map.get(head);
				if (h == 0) {
					return true;
				} else if (h == -1) {
					if (this.visit(head, node)) {
						return true;
					}
				}
			}
		}
		// this.map.put(node, 1);
		return false;

	}

}
