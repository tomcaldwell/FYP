import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.gt4j.annas.graph.EdgeInterface;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.util.Utilities;

public class MaxWeightedClique <V, E extends EdgeInterface<V>> extends Utilities{
	
	private GraphInterface<V, E> graph;
	

	public MaxWeightedClique(GraphInterface<V, E> graph) {
		super();
		this.graph = graph;
	}
	
	public List<V> findClique(GraphInterface<V, E> graph){
		List<V> vertices = new ArrayList<>(graph.getVertices());
		
		int weight=0;
		List<V> Clique = new ArrayList<>();
		
		for(V v : vertices){
			List<V> neighbourhood = allNeighbours(graph, v);
			if(Utilities.isClique(getGraph(neighbourhood))){
				Clique.clear();
				Clique.addAll(neighbourhood);
				Clique.add(v);
				int sum = SUM WEIGHTS OF ALL VERTICES
				if(sum>weight){
					weight=sum;
				}
			}	
		}
		return Clique;
	}
	
	public GraphInterface<V, E> getGraph(List<V> order){
		List<V> ord = new ArrayList(this.graph.getVertices());
		GraphInterface<V, E> newGraph = this.graph;
		List<V> nonVerts = new ArrayList<>();
		if(order.size()!=0){
			for(V d : ord){
				if(!order.contains(d)){
					nonVerts.add(d);
				}
			}
			newGraph.removeVertices(nonVerts);
			return newGraph;
		}
		return null;
	}
	

	private List<V> allNeighbours(GraphInterface<V, E> graph, V v) {
		List<V> neighbours = new ArrayList<V>();
		
		List<V> out = new ArrayList<>(graph.getVertices());
		
		for (int j =out.size()-1; j >=0; j--) {
			V ret = out.get(j);
			if (!v.equals(ret) && graph.getEdges(v, ret).size() != 0 && !neighbours.contains(ret)) {
				neighbours.add(ret);
			}
		}
		return neighbours;
	}
	
	
}
