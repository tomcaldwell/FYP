import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Collection;

import org.gt4j.annas.graph.DefaultEdge;
import org.gt4j.annas.graph.GraphInterface;
import org.gt4j.annas.graph.UndirectedGraph;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class Recognition {
	
	private GraphInterface<String, DefaultEdge> graph;
	private Condition1<String, DefaultEdge> cond1;
	private Condition2<String, DefaultEdge> cond2;
	private CliqueSeparator2<String, DefaultEdge> decomposition;
	private CliqueSeparator2<String, DefaultEdge>.DecompositionNode root;
	
	
	String a = "A";
	String b = "B";
	String c = "C";
	String d = "D";
	String e = "E";
	String f = "F";
	String g = "G";
	String h = "H";
	String i = "I";
	String j = "J";
	String k = "K";
	String l = "L";
	String m = "M";
	String n = "N";
	String o = "O";
	
	
	
	
	@Before
	public void setUp() throws Exception {

		graph = new UndirectedGraph<String, DefaultEdge>(
				DefaultEdge.class);

		graph.addVertex(a);
		graph.addVertex(b);
		graph.addVertex(c);
		graph.addVertex(d);
		graph.addVertex(e);
		graph.addVertex(f);
		graph.addVertex(g);
		graph.addVertex(h);
		graph.addVertex(i);
		graph.addVertex(j);
		graph.addVertex(k);
		graph.addVertex(l);
		graph.addVertex(m);
		graph.addVertex(n);
		graph.addVertex(o);
		

		DefaultEdge e1 = graph.addEdge(a, b);
		e1 = graph.addEdge(a, c);
		e1 = graph.addEdge(b, c);
		e1 = graph.addEdge(c, d);
		e1 = graph.addEdge(c, e);
		e1 = graph.addEdge(d, e);
		e1 = graph.addEdge(d, f);
		e1 = graph.addEdge(e, h);
		e1 = graph.addEdge(f, g);
		e1 = graph.addEdge(h, g);
		e1 = graph.addEdge(h, i);
		e1 = graph.addEdge(g, i);
		e1 = graph.addEdge(h, j);
		e1 = graph.addEdge(j, i);
		e1 = graph.addEdge(j, k);
		e1 = graph.addEdge(j, l);
		e1 = graph.addEdge(j, m);
		e1 = graph.addEdge(j, n);
		e1 = graph.addEdge(o, n);
		e1 = graph.addEdge(o, m);
		e1 = graph.addEdge(n, l);
		e1 = graph.addEdge(n, m);
		e1 = graph.addEdge(n, k);
		e1 = graph.addEdge(k, m);
		e1 = graph.addEdge(k, l);
		e1 = graph.addEdge(l, m);
		
		//e1 = graph.addEdge(c, d);
		
		
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(this.graph);
		//assertTrue(this.graph.getVertices().size()==15);
	
	}
	
	@After
	public void tearDown() throws Exception {
	}
	
	@Test
	public void TestGraph() {
		
		this.decomposition = new CliqueSeparator2<String, DefaultEdge>(this.graph);
		
		ArrayList<ArrayList<String>> Atoms = new ArrayList<ArrayList<String>>();
		
		ArrayList<String> remVerts = new ArrayList<>();
		
		ArrayList<ArrayList<String>> Leaves = this.decomposition.construct(root, Atoms);
		
		System.out.println(Leaves);
		
		for(ArrayList<String> Leaf : Leaves){
			
			for(String V : this.graph.getVertices()){
				if(!Leaf.contains(V)){
					remVerts.add(V);
				}
			}
			
			this.graph.removeVertices(remVerts);
			
			this.cond1 = new Condition1<String, DefaultEdge>(this.graph);
			this.cond2 = new Condition2<String, DefaultEdge>(this.graph);
			
			Collection<Collection<String>> connected = this.cond2.call();
			
			boolean checkHole = this.cond1.classify(this.graph);
			boolean testgraph;
			boolean condition2=true;
			
			
			
			for (Collection V : connected) {
				if(V.size()>2){
					condition2 = false;
				}
			}
			
			if(!condition2 && !checkHole){
				testgraph=false;
				System.out.println("LEAF NOT IN CLASS, SO GRAPH IS NOT IN CLASS");
				break;
			}
			else{
				testgraph=true;
				System.out.println("LEAF IS IN CLASS");
			}
			
			//assertTrue(testgraph);
			System.out.println("GRAPH IS IN CLASS");
			
		}
		
		
		
	}
}
